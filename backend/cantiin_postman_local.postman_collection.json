{
	"info": {
		"_postman_id": "8105b3a9-0f0c-4dce-8d76-46e8a89b632b",
		"name": "cantiin_postman_local",
		"description": "A collection to test cantiin api endpoints on the local server.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1) clear_tables",
			"item": [
				{
					"name": "clear_tables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47c27cfc-052f-48de-bb4a-3ad9b7eebf45",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Success is True\", () => {\r",
									"  pm.expect(responseJson.success).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/clear_tables",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"clear_tables"
							]
						}
					},
					"response": [
						{
							"name": "http://127.0.0.1:5000/clear_tables",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:5000/clear_tables",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"clear_tables"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "Access-Control-allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-allow-Headers",
									"value": "Content-Type,Autorization,true"
								},
								{
									"key": "Access-Control-allow-Methods",
									"value": "GET,PUT,POST,DELETE,OPTIONS"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.6"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Dec 2020 18:45:25 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true\n}"
						}
					]
				}
			],
			"description": "The clear_tables Endpoint",
			"protocolProfileBehavior": {}
		},
		{
			"name": "2) populate",
			"item": [
				{
					"name": "populate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02054015-80b0-4404-b2ac-dc0b9e95ca4f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Success is True\", () => {\r",
									"  pm.expect(responseJson.success).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/populate",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"populate"
							]
						}
					},
					"response": []
				}
			],
			"description": "The populate endpoint",
			"protocolProfileBehavior": {}
		},
		{
			"name": "3) products",
			"item": [
				{
					"name": "get_products",
					"item": [
						{
							"name": "get_products:normal",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bf2718f-1eff-4af2-9c4f-ecc7dc9b56d8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Success is True\", () => {\r",
											"  pm.expect(responseJson.success).to.eql(true);\r",
											"});\r",
											"pm.test(\"output as expected\", () => {\r",
											"    responseJson[\"products\"].forEach(function (product, index) {\r",
											"        pm.expect(typeof(product[\"id\"])).to.eql(typeof(1));\r",
											"        pm.expect(typeof(product[\"in_stock\"])).to.eql(typeof(true));\r",
											"        pm.expect(product[\"in_stock\"]).to.eql(true);\r",
											"        pm.expect(typeof(product[\"name\"])).to.eql(typeof(\"txt\"));\r",
											"        pm.expect(typeof(product[\"price\"])).to.eql(typeof(1));\r",
											"        pm.expect(typeof(product[\"seller_id\"])).to.eql(typeof(1));\r",
											"    });\r",
											"  pm.expect(responseJson.success).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:5000/products",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_products:in_stock=false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b01c15ac-70a7-4b04-9724-676bfb74c47e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Success is True\", () => {\r",
											"  pm.expect(responseJson.success).to.eql(true);\r",
											"});\r",
											"pm.test(\"output as expected\", () => {\r",
											"    responseJson[\"products\"].forEach(function (product, index) {\r",
											"        pm.expect(typeof(product[\"id\"])).to.eql(typeof(1));\r",
											"        pm.expect(typeof(product[\"in_stock\"])).to.eql(typeof(true));\r",
											"        pm.expect(typeof(product[\"name\"])).to.eql(typeof(\"txt\"));\r",
											"        pm.expect(typeof(product[\"price\"])).to.eql(typeof(1));\r",
											"        pm.expect(typeof(product[\"seller_id\"])).to.eql(typeof(1));\r",
											"    });\r",
											"  pm.expect(responseJson.success).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:5000/products?in_stock=false",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"products"
									],
									"query": [
										{
											"key": "in_stock",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_products:in_stock=true (Like Normal)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b77d494f-f635-4be8-bbe4-f6821ccb9689",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Success is True\", () => {\r",
											"  pm.expect(responseJson.success).to.eql(true);\r",
											"});\r",
											"pm.test(\"output as expected\", () => {\r",
											"    responseJson[\"products\"].forEach(function (product, index) {\r",
											"        pm.expect(typeof(product[\"id\"])).to.eql(typeof(1));\r",
											"        pm.expect(typeof(product[\"in_stock\"])).to.eql(typeof(true));\r",
											"        pm.expect(product[\"in_stock\"]).to.eql(true);\r",
											"        pm.expect(typeof(product[\"name\"])).to.eql(typeof(\"txt\"));\r",
											"        pm.expect(typeof(product[\"price\"])).to.eql(typeof(1));\r",
											"        pm.expect(typeof(product[\"seller_id\"])).to.eql(typeof(1));\r",
											"    });\r",
											"  pm.expect(responseJson.success).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:5000/products?in_stock=true",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"products"
									],
									"query": [
										{
											"key": "in_stock",
											"value": "true"
										}
									]
								},
								"description": "The default is in_stock=True\r\nso without any inputs in_stock = true\r\nnow when telling that i_stock=true it will return the default response"
							},
							"response": []
						},
						{
							"name": "get_products:in_stock=t :Error:400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16471ff8-efca-4981-84ec-1f2411f472b1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Success is True\", () => {\r",
											"  pm.expect(responseJson.success).to.eql(false);\r",
											"});\r",
											"pm.test(\"description\", () => {\r",
											"  pm.expect(responseJson.description).to.eql(\r",
											"    \"in_stock can not be converted to boolean\"\r",
											"  );\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:5000/products?in_stock=t",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"products"
									],
									"query": [
										{
											"key": "in_stock",
											"value": "t"
										}
									]
								},
								"description": "The default is in_stock=True\r\nso without any inputs in_stock = true\r\nnow when telling that i_stock=true it will return the default response"
							},
							"response": []
						},
						{
							"name": "get_products:in_st=false (Like Normal)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d18b992d-8d53-4735-977f-6717829fa520",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Success is True\", () => {\r",
											"  pm.expect(responseJson.success).to.eql(true);\r",
											"});\r",
											"pm.test(\"output as expected\", () => {\r",
											"    responseJson[\"products\"].forEach(function (product, index) {\r",
											"        pm.expect(typeof(product[\"id\"])).to.eql(typeof(1));\r",
											"        pm.expect(typeof(product[\"in_stock\"])).to.eql(typeof(true));\r",
											"        pm.expect(product[\"in_stock\"]).to.eql(true);\r",
											"        pm.expect(typeof(product[\"name\"])).to.eql(typeof(\"txt\"));\r",
											"        pm.expect(typeof(product[\"price\"])).to.eql(typeof(1));\r",
											"        pm.expect(typeof(product[\"seller_id\"])).to.eql(typeof(1));\r",
											"    });\r",
											"  pm.expect(responseJson.success).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:5000/products?in_st=false",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"products"
									],
									"query": [
										{
											"key": "in_st",
											"value": "false"
										}
									]
								},
								"description": "The default is in_stock=True\r\nNow the server can not find the in_stock variable\r\nso it acts like normal"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "post_products",
					"item": [
						{
							"name": "post_products:successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5ef5e15-caf8-4683-aa0f-45eeb10d76fc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Success is True\", () => {\r",
											"  pm.expect(responseJson.success).to.eql(true);\r",
											"});\r",
											"pm.test(\"output as expected\", () => {\r",
											"    responseJson[\"products\"].forEach(function (product, index) {\r",
											"        pm.expect(typeof(product[\"id\"])).to.eql(typeof(1));\r",
											"        pm.expect(typeof(product[\"in_stock\"])).to.eql(typeof(true));\r",
											"        pm.expect(product[\"in_stock\"]).to.eql(true);\r",
											"        pm.expect(typeof(product[\"name\"])).to.eql(typeof(\"txt\"));\r",
											"        pm.expect(typeof(product[\"price\"])).to.eql(typeof(1));\r",
											"        pm.expect(typeof(product[\"seller_id\"])).to.eql(typeof(1));\r",
											"    });\r",
											"  pm.expect(responseJson.success).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:5000/products?in_st=false",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"products"
									],
									"query": [
										{
											"key": "in_st",
											"value": "false"
										}
									]
								},
								"description": "The default is in_stock=True\r\nNow the server can not find the in_stock variable\r\nso it acts like normal"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "the products endpoint",
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}